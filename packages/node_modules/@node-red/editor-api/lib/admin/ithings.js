/**
 * Copyright JS Foundation and other contributors, http://js.foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 **/

var runtimeAPI;
var apiUtils = require("../util");

module.exports = {
    init: function (_runtimeAPI) {
        runtimeAPI = _runtimeAPI;
    },
    addFlow: function (req, res) {
        req.body.nodes = req.body.nodes || [];
        var opts = {
            user: req.user,
            flow: req.body,
            req: apiUtils.getRequestLogObject(req)
        }
        runtimeAPI.flows.addFlow(opts).then(function (id) {
            return res.json({ id: id });
        }).catch(function (err) {
            apiUtils.rejectHandler(req, res, err);
        })
    },
    getFlowTabs: function (req, res) {
        var opts = {
            user: req.user,
            req: apiUtils.getRequestLogObject(req)
        }
        runtimeAPI.flows.getFlows(opts).then(function (result) {
            res.json({ flows: result.flows.filter(flow => flow.type === 'tab') });
        }).catch(function (err) {
            apiUtils.rejectHandler(req, res, err);
        })
    },
    setFlowState: function (req, res) {
        var getOpts = {
            user: req.user,
            id: req.params.id,
            req: apiUtils.getRequestLogObject(req)
        }
        runtimeAPI.flows.getFlow(getOpts).then(function (flow) {
            flow.disabled = req.body.disabled;
            var updateOpts = {
                user: req.user,
                id: req.params.id,
                flow: flow,
                req: apiUtils.getRequestLogObject(req)
            }
            return runtimeAPI.flows.updateFlow(updateOpts);
        }).then(function (id) {
            return res.json({ id: id });
        }).catch(function (err) {
            apiUtils.rejectHandler(req, res, err);
        })
    },
    deleteFlow: function (req, res) {
        var opts = {
            user: req.user,
            id: req.params.id,
            req: apiUtils.getRequestLogObject(req)
        }
        runtimeAPI.flows.deleteFlow(opts).then(function () {
            res.status(204).end();
        }).catch(function (err) {
            apiUtils.rejectHandler(req, res, err);
        })
    }
}
